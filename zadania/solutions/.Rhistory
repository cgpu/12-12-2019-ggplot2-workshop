ggplot(data = countries, mapping = aes(x = birth.rate, y = death.rate)) +
geom_point() +
stat_bin()
ggplot(data = countries, mapping = aes(x = birth.rate)) +
geom_point() +
stat_bin()
ggplot(data = countries, mapping = aes(x = birth.rate)) +
geom_point() +
stat_bin(binwidth = 1)
ggplot(data = countries, mapping = aes(x = birth.rate)) +
stat_bin(binwidth = 1)
ggplot(data = countries, mapping = aes(x = birth.rate)) +
geom_bar()
ggplot(data = countries, mapping = aes(x = birth.rate)) +
stat_bin(binwidth = 1)
ggplot(data = countries, mapping = aes(x = birth.rate)) +
geom_bar()
ggplot(countries, aes(x = country, y = death.rate)) +
geom_point()
countries
ggplot(countries, aes(x = birth.rate, y = death.rate)) +
geom_point() +
stat_density()
ggplot(countries, aes(x = birth.rate, y = death.rate)) +
geom_point() +
stat_density(aes(y = death.rate))
countries %>%
complete.cases()%>%
ggplot(countries, aes(x = birth.rate, y = death.rate)) +
geom_point() +
stat_density()
countries %>%
complete.cases()%>%
ggplot(aes(x = birth.rate, y = death.rate)) +
geom_point() +
stat_density()
countries %>%
complete.cases()%>%
ggplot(,aes(x = birth.rate, y = death.rate)) +
geom_point() +
stat_density()
countries %>%
complete.cases()%>%
countries %>%
complete.cases()
countries %>%
complete.cases()
countries(complete.cases(countries)) %>%
ggplot(aes(x = birth.rate, y = death.rate)) +
geom_point() +
stat_density()
countries[complete.cases(countries),] %>%
ggplot(aes(x = birth.rate, y = death.rate)) +
geom_point() +
stat_density()
countries[complete.cases(countries),] %>%
ggplot(aes(x = birth.rate)) +
stat_density()
geom_point()
ggplot(countries, aes(x = countries, y = (birth.rate-death.rate)*population/1000) +
ggplot(countries, aes(x = countries, y = (birth.rate-death.rate)*population/1000) +
stat_density(
)
)
)
ggplot(countries, aes(x = countries, y = (birth.rate-death.rate)*population/1000) +
geom_point()
ggplot(countries, aes(x = countries, y = (birth.rate-death.rate)*population/1000)) +
geom_point()
ggplot(countries, aes(x = countries, y = (birth.rate-death.rate)*population/1000)) +
geom_point()
ggplot(countries, aes(x = countries, y = (birth.rate-death.rate)*population/1000)) +
geom_point()
head(countries)
ggplot(countries, aes(x = countries, y = (birth.rate-death.rate))) +
geom_point()
ggplot(countries, aes(x = countriy, y = (birth.rate-death.rate))) +
geom_point()
ggplot(countries, aes(x = country, y = (birth.rate-death.rate))) +
geom_point()
ggplot(countries, aes(x = country, y = (birth.rate-death.rate)*population)) +
geom_point()
ggplot(countries, aes(x = country, y = (birth.rate-death.rate)*population/1000)) +
geom_point()
ggplot(data = countries, aes(x = birth.rate, y = death.rate))
ggplot(data = countries, aes(x = continent, y = death.rate))
ggplot(data = countries, aes(x = birth.rate, y = death.rate))
ggplot(data = countries, aes(x = continent, y = death.rate))
ggplot(data = countries, aes(x = birth.rate, y = death.rate))
ggplot(data = countries, aes(x = continent, y = death.rate))
ggplot(data = countries)
ggplot(countries, aes(x = country, y = population))
ggplot(data = countries, aes(x = continent, y = death.rate)) +
geom_point()
help(geom_point)
help(geom_point)
help("stat_density")
ggplot(countries, aes(x = birth.rate, linetype = continent)) +
stat_density()
ggplot(countries, aes(x = birth.rate, fill = continent)) +
stat_density()
ggplot(countries, aes(x = birth.rate, alpha = continent)) +
stat_density()
ggplot(countries, aes(x = population, alpha = continent)) +
stat_density()
ggplot(countries, aes(x = country, alpha = continent)) +
stat_density()
ggplot(countries, aes(x = birth.rate, alpha = continent)) +
stat_density()
ggplot(countries, aes(x = country, y = death.rate, alpha = population)) +
geom_point()
ggplot(countries, aes(x = country, y = death.rate, color = population)) +
geom_point()
ggplot(countries, aes(x = continent, y = death.rate, color = population)) +
geom_point()
ggplot(countries, aes(x = birth.rate, y = death.rate, color = population)) +
geom_point()
head(countries)
ggplot(countries, aes(x = continent, y = birth.rate, color = death.rate)) +
geom_point()
ggplot(countries, aes(x = continent, y = birth.rate, alpha = death.rate)) +
geom_point()
ggplot(countries, aes(x = continent, y = birth.rate, fill = continent)) +
geom_boxplot() +
geom_point()
help(geom_point)
ggplot(countries, aes(x = continent, y = birth.rate, fill = continent)) +
geom_boxplot() +
geom_point()
ggplot(countries, aes(x = continent, y = birth.rate, color = continent)) +
geom_boxplot() +
geom_point()
countries %>%
gather(rate, values, birth.rate, death.rate)
library(tidyr)
countries %>%
gather(rate, values, birth.rate, death.rate)
countries_birth <- countries %>%
mutate(birth = birth.rate < median(birth.rate)))
countries_birth <- countries %>%
mutate(birth = birth.rate < median(birth.rate))
countries_birth
countries_birth <- countries %>%
mutate(birth = birth.rate < median(birth.rate, na.rm = TRUE))
countries_birth
countries_birth %>%
ggplot(aes(x = birth, y = population, color = continent)) +
geom_point()
ggplot(countries, aes(x=birth.rate, y=death.rate)) +
geom_point() +
geom_smooth(se=FALSE, size=3)
ggplot(countries, aes(x=birth.rate, y=death.rate)) +
geom_point() +
geom_smooth(se=FALSE, size=3)
ggplot(countries, aes(x=birth.rate, y=death.rate)) +
geom_point() +
geom_smooth(se=FALSE, size=2)
ggplot(data = countries, aes(x = continent, y = death.rate)) +
geom_point(position = "jitter")
ggplot(data = countries, aes(x = continent, y = death.rate)) +
geom_point()
position
ggplot(data = countries, aes(x = continent, y = death.rate)) +
geom_point(position = "jitter")
ggplot(data = countries, aes(x = continent, y = death.rate)) +
geom_point(position = "jitter")
ggplot(data = countries, aes(x = continent, y = death.rate)) +
geom_point(position = "jitter")
ggplot(data = countries, aes(x = continent, y = death.rate)) +
geom_point(position = "jitter")
# Zauważmy różnicę między fill a color, także w kontekście geom_point:
ggplot(countries, aes(x = continent, y = birth.rate, color = continent)) +
geom_boxplot() +
geom_point()
# Zauważmy różnicę między fill a color, także w kontekście geom_point:
ggplot(countries, aes(x = continent, y = birth.rate, color = continent)) +
geom_boxplot() +
geom_point()
ggplot(countries, aes(x = continent, y = birth.rate, color = continent)) +
geom_boxplot() +
geom_point(position = "jitter")
ggplot(data = countries, aes(x = birth.rate, y = death.rate, color = "blue")) +
geom_point(alpha = 0.2)
ggplot(data = countries, aes(x = birth.rate, y = death.rate)) +
geom_point(color = "blue", alpha = 0.6)
ggplot(data = countries, aes(x = birth.rate, y = death.rate)) +
geom_point(color = "blue", alpha = 0.4)
set.seed(100)
ggplot(countries, aes(x = continent, y = death.rate)) +
geom_point(position = "jitter", size = 3, color = "black") +
geom_point(position = "jitter", size = 2, color = "white")
ggplot(countries, aes(x = continent, y = death.rate)) +
geom_point(position = "jitter", size = 3, color = "black") +
geom_point(position = "jitter", size = 2, color = "white")
ggplot(countries, aes(x = continent, y = death.rate)) +
geom_point(position = "jitter", size = 3, color = "black") +
geom_point(position = "jitter", size = 2, color = "white")
set.seed(100)
ggplot(countries, aes(x = continent, y = death.rate)) +
geom_point(position = "jitter", size = 3, color = "black") +
geom_point(position = "jitter", size = 2, color = "white")
ggplot(countries, aes(x = continent, y = death.rate)) +
geom_point(position = "jitter", size = 3, color = "black") +
geom_point(position = "jitter", size = 2, color = "white")
ggplot(countries, aes(x = continent, y = death.rate)) +
geom_point(size = 3, color = "black") +
geom_point(size = 2, color = "white")
ggplot(countries, aes(x = continent, y = death.rate)) +
geom_point(size = 3, color = "black") +
geom_point(size = 1, color = "white")
ggplot(countries, aes(x = birth.rate, y = death.rate)) +
geom_point(size = 3, color = "black") +
geom_point(size = 1, color = "white")
ggplot(countries, aes(x = birth.rate, y = death.rate)) +
geom_point(size = 3, color = "black") +
geom_point(size = 0.7, color = "white")
ggplot(countries, aes(x=birth.rate, y=death.rate, label = country)) +
geom_point() +
geom_smooth(se=FALSE, size=2) +
geom_label()
ggplot(countries, aes(x=birth.rate, y=death.rate, label = country)) +
geom_point() +
geom_smooth(se=FALSE, size=2) +
geom_label()
ggplot(countries, aes(x=birth.rate, y=death.rate, label = country)) +
geom_point() +
geom_smooth(se=FALSE, size=2) +
geom_text()
ggplot(countries, aes(x=birth.rate, y=death.rate, label = country)) +
geom_point() +
geom_smooth(se=FALSE, size=2) +
geom_text(data = countries[countries[["country"]] == "Sierra Leone"])
ggplot(countries, aes(x=birth.rate, y=death.rate, label = country)) +
geom_point() +
geom_smooth(se=FALSE, size=2) +
geom_text(data = countries[countries[["country"]] == "Sierra Leone",])
ggplot(countries, aes(x=birth.rate, y=death.rate, label = country)) +
geom_point() +
geom_smooth(se=FALSE, size=2) +
geom_text(data = countries[countries[["country"]] == "Sierra Leone",], hjust = 0.5)
ggplot(countries, aes(x=birth.rate, y=death.rate, label = country)) +
geom_point() +
geom_smooth(se=FALSE, size=2) +
geom_text(data = countries[countries[["country"]] == "Sierra Leone",], hjust = -2)
ggplot(countries, aes(x=birth.rate, y=death.rate, label = country)) +
geom_point() +
geom_smooth(se=FALSE, size=2) +
geom_text(data = countries[countries[["country"]] == "Sierra Leone",], vjust = -2)
ggplot(countries, aes(x=birth.rate, y=death.rate, label = country)) +
geom_point() +
geom_smooth(se=FALSE, size=2) +
geom_text(data = countries[countries[["country"]] == "Sierra Leone",], vjust = 1)
ggplot(countries, aes(x=birth.rate, y=death.rate, label = country)) +
geom_point() +
geom_smooth(se=FALSE, size=2) +
geom_text(data = countries[countries[["country"]] == "Sierra Leone",], vjust = 1/5)
ggplot(countries, aes(x=birth.rate, y=death.rate, label = country)) +
geom_point() +
geom_smooth(se=FALSE, size=2) +
geom_text(data = countries[countries[["country"]] == "Sierra Leone",], vjust = 1.5)
ggplot(countries, aes(x=birth.rate, y=death.rate, label = country)) +
geom_point() +
geom_smooth(se=FALSE, size=2) +
geom_text(data = countries[which.max(countries[["death.rate"]]),], vjust = 1.5)
ggplot(countries, aes(x = birth.rate, y = death.rate)) +
geom_point(size = 3, color = "black") +
geom_point(size = 0.7, color = "white")
ggplot(countries, aes(x = death.rate, y = birth.rate)) +
geom_point(size = 3, color = "black") +
geom_point(size = 0.7, color = "white")
ggplot(countries, aes(x = death.rate, y = birth.rate)) +
geom_point(size = 3, color = "black") +
geom_point(size = 0.7, color = "white") +
annotate(geom = geom_text("sdf"))
ggplot(countries, aes(x = death.rate, y = birth.rate)) +
geom_point(size = 3, color = "black") +
geom_point(size = 0.7, color = "white") +
annotate(geom = geom_text("sdf"), x = 10, y= 10)
ggplot(countries, aes(x = death.rate, y = birth.rate)) +
geom_point(size = 3, color = "black") +
geom_point(size = 0.7, color = "white") +
annotate(geom = "text", x = 10.1, y= 47, label = "Co to za państwo?")
ggplot(countries, aes(x = death.rate, y = birth.rate)) +
geom_point(size = 3, color = "black") +
geom_point(size = 0.7, color = "white") +
annotate(geom = "text", x = 10.1, y= 48, label = "Co to za państwo?")
ggplot(countries, aes(x = death.rate, y = birth.rate)) +
geom_point(size = 3, color = "black") +
geom_point(size = 0.7, color = "white") +
annotate(geom = "text", x = 10.1, y= 49, label = "Co to za państwo?")
ggplot(countries, aes(x = death.rate, y = birth.rate)) +
geom_point(size = 3, color = "black") +
geom_point(size = 0.7, color = "white") +
annotate(geom = "text", x = 8, y= 50, label = "Co to za państwo? ->")
ggplot(countries, aes(x = death.rate, y = birth.rate)) +
geom_point(size = 3, color = "black") +
geom_point(size = 0.7, color = "white") +
annotate(geom = "text", x = 8,3, y= 49, label = "Co to za państwo? ->")
ggplot(countries, aes(x = death.rate, y = birth.rate)) +
geom_point(size = 3, color = "black") +
geom_point(size = 0.7, color = "white") +
annotate(geom = "text", x = 8.4, y= 49.7, label = "Co to za państwo? ->")
ggplot(countries, aes(x = death.rate, y = birth.rate)) +
geom_point(size = 3, color = "black") +
geom_point(size = 0.7, color = "white") +
annotate(geom = "text", x = 8.4, y= 49.7, label = "Co to za państwo? ->", size = 4)
ggplot(countries, aes(x = death.rate, y = birth.rate)) +
geom_point(size = 3, color = "black") +
geom_point(size = 0.7, color = "white") +
annotate(geom = "text", x = 8.4, y= 49.7, label = "Co to za państwo? ->", size = 5)
ggplot(countries, aes(x = death.rate, y = birth.rate)) +
geom_point(size = 3, color = "black") +
geom_point(size = 0.7, color = "white") +
annotate(geom = "text", x = 8.1, y= 49.7, label = "Co to za państwo? ->", size = 5)
ggplot(countries, aes(x = death.rate, y = birth.rate)) +
geom_point(size = 3, color = "black") +
geom_point(size = 0.7, color = "white") +
annotate(geom = "text", x = 8.1, y= 49.7, label = "Nazwa państwa ->", size = 5)
countries[which.max(countries[["birth.rate"]]),]
ggplot(countries, aes(x = death.rate, y = birth.rate)) +
geom_point(size = 3, color = "black") +
geom_point(size = 0.7, color = "white") +
annotate(geom = "text", x = 6.1, y= 4.7, label = "Nazwa państwa ->", size = 5)
ggplot(countries, aes(x = death.rate, y = birth.rate)) +
geom_point(size = 3, color = "black") +
geom_point(size = 0.7, color = "white") +
annotate(geom = "text", x = 6.1, y= 5.7, label = "Nazwa państwa ->", size = 5)
ggplot(countries, aes(x = death.rate, y = birth.rate)) +
geom_point(size = 3, color = "black") +
geom_point(size = 0.7, color = "white") +
annotate(geom = "text", x = 6.1, y= 7, label = "Nazwa państwa ->", size = 5)
ggplot(countries, aes(x = death.rate, y = birth.rate)) +
geom_point(size = 3, color = "black") +
geom_point(size = 0.7, color = "white") +
annotate(geom = "text", x = 6.7, y= 7, label = "Nazwa państwa ->", size = 5)
ggplot(countries, aes(x = death.rate, y = birth.rate)) +
geom_point(size = 3, color = "black") +
geom_point(size = 0.7, color = "white") +
annotate(geom = "text", x = 6.7, y= 6.8, label = "Nazwa państwa ->", size = 5)
countries[which.min(countries[["birth.rate"]]),]
ggplot(data = countries, aes(x = continent, y = death.rate)) +
geom_point(position = "jitter") +
geom_boxplot(outlier.color = NA) # w celu unikniecia dublowania outlierow z geom_point
ggplot(data = countries, aes(x = continent, y = death.rate)) +
geom_point(position = "jitter") +
geom_boxplot(outlier.color = NA) # w celu unikniecia dublowania outlierow z geom_point
ggplot(data = countries, aes(x = continent, y = death.rate)) +
geom_point(position = "jitter") +
geom_boxplot() # w celu unikniecia dublowania outlierow z geom_point
ggplot(data = countries, aes(x = continent, y = death.rate)) +
geom_point(position = "jitter") +
geom_boxplot(outlier.color = NA) # w celu unikniecia dublowania outlierow z geom_point
ggplot(data = countries, aes(x = continent, y = death.rate)) +
geom_point(position = "jitter") +
geom_boxplot() # w celu unikniecia dublowania outlierow z geom_point
ggplot(data = countries, aes(x = continent, y = death.rate)) +
geom_point(position = "jitter") +
geom_boxplot(outlier.color = NA) # w celu unikniecia dublowania outlierow z geom_point
ggplot(data = countries, aes(x = continent, y = death.rate)) +
geom_point(position = "jitter") +
geom_boxplot() # w celu unikniecia dublowania outlierow z geom_point
ggplot(data = countries, aes(x = continent, y = death.rate)) +
geom_point(position = "jitter") +
geom_boxplot(outlier.color = NA) # w celu unikniecia dublowania outlierow z geom_point
# Oczywiście funkcje geometrii mają swoje parametry - tu: losowe rozmieszczenie punktów względem przedziału osi x
ggplot(countries, aes(x = continent, y = birth.rate, color = continent)) +
geom_boxplot() +
geom_point(position = "jitter")
# Oczywiście funkcje geometrii mają swoje parametry - tu: losowe rozmieszczenie punktów względem przedziału osi x
ggplot(countries, aes(x = continent, y = birth.rate, color = continent)) +
geom_boxplot() +
#geom_point(position = "jitter")
ggplot(countries, aes(x=birth.rate, y=death.rate, label = country)) +
geom_point() +
geom_smooth(se=FALSE, size=2) +
geom_text(data = countries[which.max(countries[["death.rate"]]),], vjust = 1.5)
# Oczywiście funkcje geometrii mają swoje parametry - tu: losowe rozmieszczenie punktów względem przedziału osi x
ggplot(countries, aes(x = continent, y = birth.rate, color = continent)) +
geom_boxplot() #+
# Oczywiście funkcje geometrii mają swoje parametry - tu: losowe rozmieszczenie punktów względem przedziału osi x
ggplot(countries, aes(x = continent, y = birth.rate, color = continent)) +
geom_boxplot() +
geom_point(position = "jitter")
# Zauważmy różnicę między fill a color, także w kontekście geom_point:
ggplot(countries, aes(x = continent, y = birth.rate, color = continent)) +
geom_boxplot(outlier.color = NA) +
geom_point()
# Oczywiście funkcje geometrii mają swoje parametry - tu: losowe rozmieszczenie punktów względem przedziału osi x
ggplot(countries, aes(x = continent, y = birth.rate, color = continent)) +
geom_boxplot(outlier.color = NA) +
geom_point(position = "jitter")
# Warstwy geometrii zgadzają sie z kolejnością wywołań
ggplot(countries, aes(x = continent, y = birth.rate, fill = continent)) +
geom_boxplot(outlier.color = NA) + # w celu unikniecia dublowania outlierow z geom_point
geom_point()
### Geometrie
ggplot(countries, aes(x = birth.rate, y = death.rate)) +
geom_point()
ggplot(countries, aes(x = birth.rate)) +
stat_bin(binwidth = 3)
ggplot(countries, aes(x = birth.rate)) +
stat_bin(binwidth = 5)
ggplot(data = countries, aes(x = continent, y = death.rate)) +
geom_point()
#Zauważmy, że oś y zostaje nazwana tak jak określimy ją w aes()
#Bilans ludności:
ggplot(countries, aes(x = country, y = (birth.rate-death.rate)*population/1000)) +
geom_point()
# niektore geometrie wymagaja konkretnych atrybutow graficznych
ggplot(data = countries, aes(x = continent)) +
geom_bar()
ggplot(countries, aes(x = birth.rate, y = death.rate, colour = continent, size = population)) +
geom_point()
ggplot(data = countries, aes(x = birth.rate, y = death.rate)) +
geom_point(color = "blue", alpha = 0.4)
help("stat_density")
#Parametr alpha dla zmiennej dyskretnej:
ggplot(countries, aes(x = birth.rate, alpha = continent)) +
stat_density()
#Zachowanie parametru alpha dla zmiennej ciągłej:
ggplot(countries, aes(x = continent, y = birth.rate, alpha = death.rate)) +
geom_point()
### Laczenei geometrii
# Warstwy geometrii na wykresie zgadzają sie z kolejnością wywołań
ggplot(countries, aes(x = continent, y = birth.rate, fill = continent)) +
geom_boxplot(outlier.color = NA) + # w celu unikniecia dublowania outlierow z geom_point
geom_point()
# A na odwrót?
ggplot(countries, aes(x = continent, y = birth.rate, fill = continent)) +
geom_point() +
geom_boxplot(outlier.color = NA)  # w celu unikniecia dublowania outlierow z geom_point
# Zauważmy różnicę między fill a color, także w kontekście geom_point:
ggplot(countries, aes(x = continent, y = birth.rate, color = continent)) +
geom_boxplot(outlier.color = NA) +
geom_point()
# Oczywiście funkcje geometrii mają swoje parametry - tu: losowe rozmieszczenie punktów względem przedziału osi x
ggplot(countries, aes(x = continent, y = birth.rate, color = continent)) +
geom_boxplot(outlier.color = NA) +
geom_point(position = "jitter")
ggplot(countries, aes(x=birth.rate, y=death.rate, label = country)) +
geom_point() +
geom_smooth(se=FALSE, size=2) +
geom_text(data = countries[which.max(countries[["death.rate"]]),], vjust = 1.5)
ggplot(data = countries, aes(x = continent, y = death.rate)) +
geom_point(position = "jitter") +
geom_boxplot(outlier.color = NA)
ggplot(countries, aes(x=birth.rate, y=death.rate, label = country)) +
geom_point() +
geom_smooth(se=FALSE, size=2) +
geom_text(data = countries[which.max(countries[["death.rate"]]),], vjust = 1.5)
setwd("~/Studia/warsztaty")
install.packages(c("gapminder", "gganimate"))
library(ggplot2)
library(dplyr)
movies <- read.csv("zadania/data/movie_metadata.csv")
movies_actors <- movies%>%
group_by(aktor=actor_1_name)%>%
summarise(ilosc=n())%>%
arrange(desc(ilosc))%>%
head(6)
ggplot(movies_actors,aes(aktor,ilosc))+
geom_col(width = 0.8,fill="#f35f71")+
geom_text(aes(label=ilosc),nudge_y = -3, color="white",size=6)+
labs(title="Role pierwszoplanowe",y="Ilość ról pierwszoplanowych")+
coord_flip()+
theme(
plot.title = element_text(face="bold",size=24,color="#8d99ae",hjust=0.2),
plot.margin = unit(c(1,1,1,1),"cm"),
panel.background = element_blank(),
axis.ticks = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_text(size=16,color="#2b2d42",face="italic",hjust=1.1),
axis.title.x=element_text(size=18,hjust=0.2),
axis.text.x=element_blank(),
aspect.ratio = 1
)
library(ggplot2)
library(dplyr)
movies <- read.csv("zadania/data/movie_metadata.csv")
getwd()
setwd("~/Studia/warsztaty/12-12-2019-ggplot2-workshop/zadania/solutions")
movies <- read.csv("zadania/data/movie_metadata.csv")
movies_actors <- movies%>%
group_by(aktor=actor_1_name)%>%
summarise(ilosc=n())%>%
arrange(desc(ilosc))%>%
head(6)
movies <- read.csv("zadania/data/movie_metadata.csv")
setwd("~/Studia/warsztaty/12-12-2019-ggplot2-workshop")
movies <- read.csv("zadania/data/movie_metadata.csv")
movies_actors <- movies%>%
group_by(aktor=actor_1_name)%>%
summarise(ilosc=n())%>%
arrange(desc(ilosc))%>%
head(6)
ggplot(movies_actors,aes(aktor,ilosc))+
geom_col(width = 0.8,fill="#f35f71")+
geom_text(aes(label=ilosc),nudge_y = -3, color="white",size=6)+
labs(title="Role pierwszoplanowe",y="Ilość ról pierwszoplanowych")+
coord_flip()+
theme(
plot.title = element_text(face="bold",size=24,color="#8d99ae",hjust=0.2),
plot.margin = unit(c(1,1,1,1),"cm"),
panel.background = element_blank(),
axis.ticks = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_text(size=16,color="#2b2d42",face="italic",hjust=1.1),
axis.title.x=element_text(size=18,hjust=0.2),
axis.text.x=element_blank(),
aspect.ratio = 1
)
setwd("~/Studia/warsztaty/12-12-2019-ggplot2-workshop/zadania/solutions")
